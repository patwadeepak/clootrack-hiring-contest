{"version":3,"sources":["Components/Dropdown.js","chartData/dataSlice.js","chartData/dataAPI.js","Components/ChartSelector.js","Components/DataModifier.js","Components/Chart.js","App.js","store.js","serviceWorker.js","index.js"],"names":["Dropdown","label","value","options","handleChange","FormControl","className","InputLabel","Select","onChange","map","item","index","MenuItem","fetchData","createAsyncThunk","a","fetch","then","res","json","data","response","dataSlice","createSlice","name","initialState","status","selected","reducers","changeSelected","state","action","payload","updateData","extraReducers","builder","addCase","pending","fulfilled","actions","selectData","getSelectedData","length","type","elements","ChartSelector","useSelector","dispatch","useDispatch","e","target","DataModifier","selectedData","useState","chartType","setChartType","JSON","stringify","tempValue","setTempValue","showError","setShowError","error","setError","useEffect","isNaN","join","input","split","parseInt","filter","Error","toString","message","style","fontSize","padding","width","resize","transformDataForChart","dataToPlot","color","getRandomColor","hueRandom","Math","floor","random","hslToHex","h","s","l","min","f","n","k","max","round","padStart","Chart","transformedData","setTransformedData","BarChart","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","fill","Cell","stroke","PieChart","Pie","cx","cy","labelLine","outerRadius","App","store","configureStore","reducer","dataReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.194118b6.chunk.js","sourcesContent":["import React from \"react\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport \"./Dropdown.css\";\n\nconst Dropdown = ({ label, value, options = [], handleChange }) => {\n  return (\n    <FormControl className=\"dropdown\">\n      <InputLabel>{label}</InputLabel>\n      <Select label={label} onChange={handleChange} value={value}>\n        {options.map((item, index) => (\n          <MenuItem key={index} value={index}>\n            {label === \"Chart\" ? `${label} ${index + 1}` : `${item}`}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default Dropdown;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchDataFromApi } from \"./dataAPI\";\n\nconst initialState = {\n  status: \"idle\",\n  value: [],\n  selected: \"\",\n};\n\nexport const fetchData = createAsyncThunk(\"chart/fetchData\", async () => {\n  const response = await fetchDataFromApi();\n  return response.data;\n});\n\nexport const dataSlice = createSlice({\n  name: \"data\",\n  initialState,\n  reducers: {\n    changeSelected: (state, action) => {\n      state.selected = action.payload;\n    },\n    updateData: (state, action) => {\n      state.value[state.selected] = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchData.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchData.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value = action.payload;\n      });\n  },\n});\n\nexport const { changeSelected, updateData } = dataSlice.actions;\n\nexport const selectData = (state) => state.data;\n\nexport const getSelectedData = (state) => {\n  if (state.data.value.length) return state.data.value[state.data.selected];\n  else return { type: \"\", elements: [] };\n};\n\nexport default dataSlice.reducer;\n","// function that makes api call and gets the data\nexport const fetchDataFromApi = () => {\n  return fetch(\n    \"https://s3-ap-southeast-1.amazonaws.com/he-public-data/chart2986176.json\"\n  )\n    .then((res) => res.json())\n    .then((json) => ({ data: json }));\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Dropdown from \"./Dropdown\";\nimport { changeSelected, selectData } from \"../chartData/dataSlice\";\n\nconst ChartSelector = () => {\n  const data = useSelector(selectData);\n  const dispatch = useDispatch();\n  return (\n    <Dropdown\n      label=\"Chart\"\n      options={data.value}\n      handleChange={(e) => dispatch(changeSelected(e.target.value))}\n      value={data.selected}\n    />\n  );\n};\n\nexport default ChartSelector;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Dropdown from \"./Dropdown\";\nimport { getSelectedData, updateData } from \"../chartData/dataSlice\";\nimport \"./DataModifier.css\";\nconst DataModifier = () => {\n  const dispatch = useDispatch();\n\n  const selectedData = useSelector(getSelectedData);\n  const [chartType, setChartType] = useState(\"\");\n  const [tempValue, setTempValue] = useState(JSON.stringify(selectedData));\n  const [showError, setShowError] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setTempValue(selectedData);\n    if (selectedData && selectedData.type) setChartType(selectedData.type);\n  }, [selectedData]);\n\n  const handleChange = (e) => {\n    try {\n      setTempValue(e.target.value);\n      const input = e.target.value.split(\"\\n\").map((item) => parseInt(item));\n      if (chartType === \"Pie\" && input.filter((item) => item < 0).length) {\n        throw new Error(\"Pie chart cannot have negative values\");\n      }\n      if (input.toString() !== selectedData.elements.toString()) {\n        dispatch(updateData({ ...selectedData, elements: input }));\n        setError(\"\");\n        setShowError(false);\n      }\n    } catch (e) {\n      setError(e.message);\n      setShowError(true);\n    }\n  };\n\n  return (\n    <div className=\"dataModifier\">\n      <div>Edit chart data below</div>\n      <Dropdown\n        label=\"Type\"\n        options={[\"Bar\", \"Pie\"]}\n        handleChange={(e) =>\n          dispatch(\n            updateData({\n              ...selectedData,\n              type: e.target.value === 0 ? \"Bar\" : \"Pie\",\n            })\n          )\n        }\n        value={chartType === \"Bar\" ? 0 : 1}\n      />\n      <br />\n      <textarea\n        label=\"Data\"\n        value={\n          tempValue &&\n          tempValue.elements &&\n          tempValue.elements.map((item) => (isNaN(item) ? \"\" : item)).join(\"\\n\")\n        }\n        onChange={handleChange}\n        style={{\n          fontSize: \"1rem\",\n          padding: \"5px\",\n          width: \"8rem\",\n          resize: \"vertical\",\n        }}\n      />\n      {showError && <div>{error}</div>}\n    </div>\n  );\n};\n\nexport default DataModifier;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Cell,\n  PieChart,\n  Pie,\n} from \"recharts\";\nimport { useSelector } from \"react-redux\";\nimport { getSelectedData } from \"../chartData/dataSlice\";\n\nconst Chart = () => {\n  const dataToPlot = useSelector(getSelectedData);\n\n  const [transformedData, setTransformedData] = useState([]);\n\n  useEffect(() => {\n    const data = transformDataForChart(dataToPlot);\n    setTransformedData(data);\n  }, [dataToPlot]);\n\n  return transformedData && transformedData.length ? (\n    dataToPlot.type === \"Bar\" ? (\n      <BarChart\n        width={500}\n        height={300}\n        data={transformedData}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"value\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"value\" fill=\"#8884d8\">\n          {transformedData.map((item, index) => (\n            <Cell key={index} stroke={item.color} fill={item.color} />\n          ))}\n        </Bar>\n      </BarChart>\n    ) : (\n      <PieChart width={400} height={400}>\n        <Pie\n          data={transformedData}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          dataKey=\"value\"\n          label\n        >\n          {transformedData.map((item, index) => (\n            <Cell key={`cell-${index}`} fill={item.color} />\n          ))}\n        </Pie>\n        <Tooltip />\n      </PieChart>\n    )\n  ) : (\n    \"Select a Chart from dropdown\"\n  );\n};\n\nconst transformDataForChart = (dataToPlot) => {\n  if (dataToPlot) {\n    return dataToPlot.elements.map((item) => ({\n      value: isNaN(item) ? \"\" : item,\n      color: getRandomColor(),\n    }));\n  } else return [];\n};\n\nconst getRandomColor = () => {\n  const hueRandom = Math.floor(Math.random() * 360);\n  return hslToHex(hueRandom);\n};\n\n// This will get you colors that have similar aesthetic\nconst hslToHex = (h, s = 52, l = 68) => {\n  l /= 100;\n  const a = (s * Math.min(l, 1 - l)) / 100;\n  const f = (n) => {\n    const k = (n + h / 30) % 12;\n    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return Math.round(255 * color)\n      .toString(16)\n      .padStart(2, \"0\");\n  };\n  return `#${f(0)}${f(8)}${f(4)}`;\n};\n\nexport default Chart;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ChartSelector from \"./Components/ChartSelector\";\nimport DataModifier from \"./Components/DataModifier\";\nimport Chart from \"./Components/Chart\";\nimport { fetchData } from \"./chartData/dataSlice\";\nimport \"./App.css\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchData());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"App-header\">\n          <ChartSelector />\n          <DataModifier />\n        </div>\n      </div>\n      <div className=\"section\">\n        <Chart />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport dataReducer from \"./chartData/dataSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    data: dataReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}